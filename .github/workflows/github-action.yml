name: Build and Deploy Airflow to EC2

on:
    push:
        branches:
        - main
        - feat/github-action-hyerim

jobs:
    build:
        runs-on: ubuntu-latest
        
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
    
            - name: Set up SSH
              uses: webfactory/ssh-agent@v0.5.3
              with:
                ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
            - name: Add known hosts
              run: |
                echo "${{ secrets.KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
    
            - name: Sync Master Node
              run: |
                ssh ec2-user@${{ secrets.MASTER_IP }} "mkdir -p /home/ec2-user/airflow_project_v2"
                scp -r * ec2-user@${{ secrets.MASTER_IP }}:/home/ec2-user/airflow_project_v2
    
            - name: Load .env to Master Node and Apply Environment Variables (Before Worker Deploy)
              run: |
                ssh ec2-user@${{ secrets.MASTER_IP }} "
                    cd /home/ec2-user/airflow_project_v2/airflow &&
                    export \$(cat .env | xargs) &&
                    echo \"AIRFLOW__CORE__SQL_ALCHEMY_CONN=\$AIRFLOW__CORE__SQL_ALCHEMY_CONN\" >> ~/.bashrc &&
                    source ~/.bashrc
                    "

            - name: Copy Airflow Project to Worker Nodes
              run: |
                ssh -A ec2-user@${{ secrets.MASTER_IP }} "ssh ec2-user@${{ secrets.WORKER1_PRIVATE_IP }} 'mkdir -p /home/ec2-user/airflow_project_v2'"
                ssh -A ec2-user@${{ secrets.MASTER_IP }} "rsync -avz /home/ec2-user/airflow_project_v2 ec2-user@${{ secrets.WORKER1_PRIVATE_IP }}:/home/ec2-user/"
                ssh -A ec2-user@${{ secrets.MASTER_IP }} "ssh ec2-user@${{ secrets.WORKER2_PRIVATE_IP }} 'mkdir -p /home/ec2-user/airflow_project_v2'"
                ssh -A ec2-user@${{ secrets.MASTER_IP }} "rsync -avz /home/ec2-user/airflow_project_v2 ec2-user@${{ secrets.WORKER2_PRIVATE_IP }}:/home/ec2-user/"
                ssh -A ec2-user@${{ secrets.MASTER_IP }} "ssh ec2-user@${{ secrets.WORKER3_PRIVATE_IP }} 'mkdir -p /home/ec2-user/airflow_project_v2'"
                ssh -A ec2-user@${{ secrets.MASTER_IP }} "rsync -avz /home/ec2-user/airflow_project_v2 ec2-user@${{ secrets.WORKER3_PRIVATE_IP }}:/home/ec2-user/"
    
            - name: Build to Worker Nodes (Docker Build and Cleanup)
              run: |
                ssh -A ec2-user@${{ secrets.MASTER_IP }} "
                    ssh ec2-user@${{ secrets.WORKER1_PRIVATE_IP }} '
                    docker stop airflow-worker || true &&
                    docker rm airflow-worker || true &&
                    docker image prune -af &&
                    docker build --pull -t airflow-worker -f /home/ec2-user/airflow_project_v2/airflow/Dockerfile /home/ec2-user/airflow_project_v2/airflow
                    ' &&
                    ssh ec2-user@${{ secrets.WORKER2_PRIVATE_IP }} '
                    docker stop airflow-worker || true &&
                    docker rm airflow-worker || true &&
                    docker image prune -af &&
                    docker build --pull -t airflow-worker -f /home/ec2-user/airflow_project_v2/airflow/Dockerfile /home/ec2-user/airflow_project_v2/airflow
                    ' &&
                    ssh ec2-user@${{ secrets.WORKER3_PRIVATE_IP }} '
                    docker stop airflow-worker || true &&
                    docker rm airflow-worker || true &&
                    docker image prune -af &&
                    docker build --pull -t airflow-worker -f /home/ec2-user/airflow_project_v2/airflow/Dockerfile /home/ec2-user/airflow_project_v2/airflow
                    '
                "
            
            - name: Clean up space
              run: |
                sudo apt-get clean
                sudo apt-get autoremove -y
                sudo rm -rf /usr/share/dotnet
                sudo rm -rf /usr/local/lib/android
                sudo rm -rf /opt/ghc
                sudo rm -rf /var/lib/apt/lists/*
                sudo rm -rf /var/cache/apt/archives/*
                df -h
                    
                  
            - name: Initialize Airflow (DB Init)
              run: |
                ssh ec2-user@${{ secrets.MASTER_IP }} "
                    cd /home/ec2-user/airflow_project_v2/airflow &&
                    docker-compose down &&
                    docker-compose up -d &&
                    docker-compose exec -T airflow-webserver env PGPASSWORD='postgres' psql \
                    -h team6-postgres-for-airflow.ch4xfyi6stod.ap-northeast-2.rds.amazonaws.com \
                    -U postgres \
                    -d airflow \
                    -c 'SELECT 1;' &&
                    docker-compose exec -T airflow-webserver airflow db init &&
                    docker-compose restart
                "



    deploy:
        runs-on: ubuntu-latest
        needs: build
        if: ${{ !contains(github.event.head_commit.message, '[Skip build]') }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
    
            - name: Set up SSH
              uses: webfactory/ssh-agent@v0.5.3
              with:
                ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
            - name: Add known hosts
              run: |
                echo "${{ secrets.KNOWN_HOSTS }}" >> ~/.ssh/known_hosts

            - name: Deploy to Worker Nodes (Docker Run)
              run: |
                ssh -A ec2-user@${{ secrets.MASTER_IP }} "
                    ssh ec2-user@${{ secrets.WORKER1_PRIVATE_IP }} 'docker run -d --name airflow-worker airflow-worker' &&
                    ssh ec2-user@${{ secrets.WORKER2_PRIVATE_IP }} 'docker run -d --name airflow-worker airflow-worker' &&
                    ssh ec2-user@${{ secrets.WORKER3_PRIVATE_IP }} 'docker run -d --name airflow-worker airflow-worker'
                "
              
            - name: Start Airflow on Master
              run: |
                ssh ec2-user@${{ secrets.MASTER_IP }} "
                    cd /home/ec2-user/airflow_project_v2/airflow &&
                    docker-compose down &&
                    docker-compose up -d &&
                    docker-compose exec -T airflow-webserver airflow db upgrade &&
                    docker-compose restart
                "